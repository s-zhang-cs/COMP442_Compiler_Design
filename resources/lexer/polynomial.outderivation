<Prog> ::= <ClassDecl> <FuncDef> 'main' <FuncBody>
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <StatementList> '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <StatementList> '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <StatementList> '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <StatementList> '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <StatementList> '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> <StatementList> '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> <Statement> <StatementList> '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> <Statement> epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' <StatBlock> ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <StatementList> '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <StatementList> '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> <StatementList> '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> <Statement> <StatementList> '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> <Statement> epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <FuncOrAssignStat> ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'id' <FuncOrAssignStatIdnest> ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'id' <IndiceRep> <FuncOrAssignStatIdnestVarTail> ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'id' <IndiceRep> <AssignStatTail> ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'id' <IndiceRep> <AssignOp> <Expr> ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'id' <IndiceRep> <AssignOp> <ArithExpr> <ExprTail> ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'id' <IndiceRep> <AssignOp> <ArithExpr> epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'id' <IndiceRep> <AssignOp> <Term> <ArithExprTail> epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'id' <IndiceRep> <AssignOp> <Term> <AddOp> <Term> <ArithExprTail> epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'id' <IndiceRep> <AssignOp> <Term> <AddOp> <Term> epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'id' <IndiceRep> <AssignOp> <Term> <AddOp> <Factor> <TermTail> epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'id' <IndiceRep> <AssignOp> <Term> <AddOp> <Factor> epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'id' <IndiceRep> <AssignOp> <Term> <AddOp> 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'id' <IndiceRep> <AssignOp> <Term> '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'id' <IndiceRep> <AssignOp> <Factor> <TermTail> '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'id' <IndiceRep> <AssignOp> <Factor> epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'id' <IndiceRep> <AssignOp> <FuncOrVar> epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'id' <IndiceRep> <AssignOp> 'id' <FuncOrVarIdnest> epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'id' <IndiceRep> <AssignOp> 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'id' <IndiceRep> 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' <Expr> ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' <ArithExpr> <ExprTail> ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' <ArithExpr> epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' <Term> <ArithExprTail> epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' <Term> epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' <Factor> <TermTail> epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' <Factor> epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' <FuncOrVar> epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' 'id' <FuncOrVarIdnest> epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' 'id' <IndiceRep> <FuncOrVarIdnestTail> epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' 'id' <IndiceRep> epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' 'id' '[' <Expr> ']' <IndiceRep> epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' 'id' '[' <Expr> ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' 'id' '[' <ArithExpr> <ExprTail> ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' 'id' '[' <ArithExpr> epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' 'id' '[' <Term> <ArithExprTail> epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' 'id' '[' <Term> epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' 'id' '[' <Factor> <TermTail> epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' 'id' '[' <Factor> epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' 'id' '[' <FuncOrVar> epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' 'id' '[' 'id' <FuncOrVarIdnest> epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <ArithExpr> <ExprTail> ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <ArithExpr> <RelOp> <ArithExpr> ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <ArithExpr> <RelOp> <Term> <ArithExprTail> ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <ArithExpr> <RelOp> <Term> epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <ArithExpr> <RelOp> <Factor> <TermTail> epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <ArithExpr> <RelOp> <Factor> epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <ArithExpr> <RelOp> <FuncOrVar> epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <ArithExpr> <RelOp> 'id' <FuncOrVarIdnest> epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <ArithExpr> <RelOp> 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <ArithExpr> 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Term> <ArithExprTail> 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Term> epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Factor> <TermTail> epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Factor> epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' <FuncOrVar> epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' 'id' <FuncOrVarIdnest> epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> <Statement> 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' <StatBlock> ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <StatementList> '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <StatementList> '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> <StatementList> '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> <Statement> <StatementList> '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> <Statement> <Statement> <StatementList> '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> <Statement> <Statement> epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> <Statement> 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' <Expr> ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' <ArithExpr> <ExprTail> ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' <ArithExpr> epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' <Term> <ArithExprTail> epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' <Term> epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' <Factor> <TermTail> epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' <Factor> epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' <FuncOrVar> epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' 'id' <FuncOrVarIdnest> epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' 'id' <IndiceRep> <FuncOrVarIdnestTail> epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' <FuncOrVarIdnest> epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' <AParams> ')' <FuncOrVarIdnestTail> epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' <AParams> ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' <Expr> <AParamsTail> ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' <Expr> epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' <ArithExpr> <ExprTail> epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' <ArithExpr> epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' <Term> <ArithExprTail> epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' <Term> epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' <Factor> <TermTail> epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' <Factor> epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' <FuncOrVar> epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' 'id' <FuncOrVarIdnest> epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> <Statement> 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' <Expr> ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' <ArithExpr> <ExprTail> ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' <ArithExpr> epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' <Term> <ArithExprTail> epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' <Term> epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' <Factor> <TermTail> epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' <Factor> epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' <FuncOrVar> epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' 'id' <FuncOrVarIdnest> epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' 'id' <IndiceRep> <FuncOrVarIdnestTail> epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' <FuncOrVarIdnest> epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' <AParams> ')' <FuncOrVarIdnestTail> epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' <AParams> ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' <Expr> <AParamsTail> ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' <Expr> epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' <ArithExpr> <ExprTail> epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' <ArithExpr> epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' <Term> <ArithExprTail> epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' <Term> epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' <Factor> <TermTail> epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' <Factor> epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' <FuncOrVar> epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' 'id' <FuncOrVarIdnest> epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' 'id' <IndiceRep> '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' <Statement> 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' <Expr> ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' <ArithExpr> <ExprTail> ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' <ArithExpr> epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' <Term> <ArithExprTail> epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' <Term> epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' <Factor> <TermTail> epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' <Factor> epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' <FuncOrVar> epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' 'id' <FuncOrVarIdnest> epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Expr> ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <ArithExpr> <ExprTail> ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <ArithExpr> <RelOp> <ArithExpr> ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <ArithExpr> <RelOp> <Term> <ArithExprTail> ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <ArithExpr> <RelOp> <Term> epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <ArithExpr> <RelOp> <Factor> <TermTail> epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <ArithExpr> <RelOp> <Factor> epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <ArithExpr> <RelOp> 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <ArithExpr> 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Term> <ArithExprTail> 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Term> epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Factor> <TermTail> epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <Factor> epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' <FuncOrVar> epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' 'id' <FuncOrVarIdnest> epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> <Statement> 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' <StatBlock> 'else' <StatBlock> ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' <StatBlock> 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <StatementList> '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <StatementList> '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> <StatementList> '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> <Statement> <StatementList> '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> <Statement> epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> <FuncOrAssignStat> ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' <FuncOrAssignStatIdnest> ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' <IndiceRep> <FuncOrAssignStatIdnestVarTail> ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' <IndiceRep> <AssignStatTail> ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' <IndiceRep> <AssignOp> <Expr> ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' <IndiceRep> <AssignOp> <ArithExpr> <ExprTail> ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' <IndiceRep> <AssignOp> <ArithExpr> epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' <IndiceRep> <AssignOp> <Term> <ArithExprTail> epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' <IndiceRep> <AssignOp> <Term> epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' <IndiceRep> <AssignOp> <Factor> <TermTail> epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' <IndiceRep> <AssignOp> <Factor> epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' <IndiceRep> <AssignOp> <FuncOrVar> epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <FuncOrVarIdnest> epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' <IndiceRep> <AssignOp> 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' <IndiceRep> 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' '[' <Expr> ']' <IndiceRep> 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' '[' <Expr> ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' '[' <ArithExpr> <ExprTail> ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' '[' <ArithExpr> epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' '[' <Term> <ArithExprTail> epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' '[' <Term> <AddOp> <Term> <ArithExprTail> epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' '[' <Term> <AddOp> <Term> epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' '[' <Term> <AddOp> <Factor> <TermTail> epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' '[' <Term> <AddOp> <Factor> epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' '[' <Term> <AddOp> 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' '[' <Term> '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' '[' <Factor> <TermTail> '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' '[' <Factor> epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' '[' <FuncOrVar> epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' '[' 'id' <FuncOrVarIdnest> epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <Statement> 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> <FuncOrAssignStat> ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <FuncOrAssignStatIdnest> ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <FuncOrAssignStatIdnestVarTail> ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignStatTail> ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> <Expr> ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> <ArithExpr> <ExprTail> ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> <ArithExpr> epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> <Term> <ArithExprTail> epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> <Term> epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> <Factor> <TermTail> epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> <Factor> epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> <FuncOrVar> epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> 'id' <FuncOrVarIdnest> epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> <FuncOrVarIdnestTail> epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> 'id' '[' <Expr> ']' <IndiceRep> epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> 'id' '[' <Expr> ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> 'id' '[' <ArithExpr> <ExprTail> ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> 'id' '[' <ArithExpr> epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> 'id' '[' <Term> <ArithExprTail> epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> 'id' '[' <Term> <AddOp> <Term> <ArithExprTail> epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> 'id' '[' <Term> <AddOp> <Term> epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> 'id' '[' <Term> <AddOp> <Factor> <TermTail> epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> 'id' '[' <Term> <AddOp> <Factor> epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> 'id' '[' <Term> <AddOp> 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> 'id' '[' <Term> '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> 'id' '[' <Factor> <TermTail> '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> 'id' '[' <Factor> epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> 'id' '[' <FuncOrVar> epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> 'id' '[' 'id' <FuncOrVarIdnest> epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> <AssignOp> 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' <IndiceRep> 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' '[' <Expr> ']' <IndiceRep> 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' '[' <Expr> ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' '[' <ArithExpr> <ExprTail> ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' '[' <ArithExpr> epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' '[' <Term> <ArithExprTail> epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' '[' <Term> epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' '[' <Factor> <TermTail> epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' '[' <Factor> epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' '[' <FuncOrVar> epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' '[' 'id' <FuncOrVarIdnest> epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <Statement> 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' <FuncOrAssignStat> ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <FuncOrAssignStatIdnest> ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> <FuncOrAssignStatIdnestVarTail> ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> <AssignStatTail> ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> <AssignOp> <Expr> ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> <AssignOp> <ArithExpr> <ExprTail> ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> <AssignOp> <ArithExpr> epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> <AssignOp> <Term> <ArithExprTail> epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> <AssignOp> <Term> epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> <AssignOp> <Factor> <TermTail> epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> <AssignOp> <Factor> epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> <AssignOp> <FuncOrVar> epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> <AssignOp> 'id' <FuncOrVarIdnest> epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> <FuncOrVarIdnestTail> epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> <AssignOp> 'id' '[' <Expr> ']' <IndiceRep> epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> <AssignOp> 'id' '[' <Expr> ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> <AssignOp> 'id' '[' <ArithExpr> <ExprTail> ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> <AssignOp> 'id' '[' <ArithExpr> epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> <AssignOp> 'id' '[' <Term> <ArithExprTail> epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> <AssignOp> 'id' '[' <Term> epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> <AssignOp> 'id' '[' <Factor> <TermTail> epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> <AssignOp> 'id' '[' <Factor> epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> <AssignOp> 'id' '[' <FuncOrVar> epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> <AssignOp> 'id' '[' 'id' <FuncOrVarIdnest> epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> <AssignOp> 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' <IndiceRep> 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Expr> ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <ExprTail> ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> <ArithExpr> ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> <Term> <ArithExprTail> ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> <Term> epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> <Factor> <TermTail> epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> <Factor> epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> <FuncOrVar> epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> 'id' <FuncOrVarIdnest> epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> 'id' <IndiceRep> <FuncOrVarIdnestTail> epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> 'id' <IndiceRep> epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> 'id' '[' <Expr> ']' <IndiceRep> epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> 'id' '[' <Expr> ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> 'id' '[' <ArithExpr> <ExprTail> ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> 'id' '[' <ArithExpr> epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> 'id' '[' <Term> <ArithExprTail> epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> 'id' '[' <Term> <AddOp> <Term> <ArithExprTail> epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> 'id' '[' <Term> <AddOp> <Term> epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> 'id' '[' <Term> <AddOp> <Factor> <TermTail> epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> 'id' '[' <Term> <AddOp> <Factor> epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> 'id' '[' <Term> <AddOp> 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> 'id' '[' <Term> '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> 'id' '[' <Factor> <TermTail> '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> 'id' '[' <Factor> epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> 'id' '[' <FuncOrVar> epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> 'id' '[' 'id' <FuncOrVarIdnest> epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> <RelOp> 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <ArithExpr> 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Term> <ArithExprTail> 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Term> epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Factor> <TermTail> epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <Factor> epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' <FuncOrVar> epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' 'id' <FuncOrVarIdnest> epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' 'id' <IndiceRep> <FuncOrVarIdnestTail> epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' 'id' <IndiceRep> epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' 'id' '[' <Expr> ']' <IndiceRep> epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' 'id' '[' <Expr> ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' 'id' '[' <ArithExpr> <ExprTail> ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' 'id' '[' <ArithExpr> epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' 'id' '[' <Term> <ArithExprTail> epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' 'id' '[' <Term> epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' 'id' '[' <Factor> <TermTail> epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' 'id' '[' <Factor> epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' 'id' '[' <FuncOrVar> epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' 'id' '[' 'id' <FuncOrVarIdnest> epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <Statement> 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> <FuncOrAssignStat> ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> 'id' <FuncOrAssignStatIdnest> ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> 'id' <IndiceRep> <FuncOrAssignStatIdnestVarTail> ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> 'id' <IndiceRep> <AssignStatTail> ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> 'id' <IndiceRep> <AssignOp> <Expr> ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> 'id' <IndiceRep> <AssignOp> <ArithExpr> <ExprTail> ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> 'id' <IndiceRep> <AssignOp> <ArithExpr> epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> 'id' <IndiceRep> <AssignOp> <Term> <ArithExprTail> epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> 'id' <IndiceRep> <AssignOp> <Term> epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> 'id' <IndiceRep> <AssignOp> <Factor> <TermTail> epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> 'id' <IndiceRep> <AssignOp> <Factor> epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> 'id' <IndiceRep> <AssignOp> 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> 'id' <IndiceRep> 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <Statement> 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> <FuncOrAssignStat> ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <FuncOrAssignStatIdnest> ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <FuncOrAssignStatIdnestVarTail> ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignStatTail> ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> <Expr> ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> <ArithExpr> <ExprTail> ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> <ArithExpr> epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> <Term> <ArithExprTail> epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> <Term> epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> <Factor> <TermTail> epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> <Factor> epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> <FuncOrVar> epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <FuncOrVarIdnest> epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> <FuncOrVarIdnestTail> epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' <FuncOrVarIdnest> epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <AParams> ')' <FuncOrVarIdnestTail> epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <AParams> ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> <AParamsTail> ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' <Expr> <AParamsTail> ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' <Expr> ',' <Expr> <AParamsTail> ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' <Expr> ',' <Expr> epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' <Expr> ',' <ArithExpr> <ExprTail> epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' <Expr> ',' <ArithExpr> epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' <Expr> ',' <Term> <ArithExprTail> epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' <Expr> ',' <Term> epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' <Expr> ',' <Factor> <TermTail> epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' <Expr> ',' <Factor> epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' <Expr> ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' <ArithExpr> <ExprTail> ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' <ArithExpr> epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' <Term> <ArithExprTail> epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' <Term> epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' <Factor> <TermTail> epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' <Factor> epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <ArithExpr> <ExprTail> ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <ArithExpr> epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Term> <ArithExprTail> epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Term> epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Factor> <TermTail> epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Factor> epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Sign> <Factor> epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Sign> 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> <AssignOp> 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' <IndiceRep> 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <Statement> 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> <FuncOrAssignStat> ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <FuncOrAssignStatIdnest> ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <FuncOrAssignStatIdnestVarTail> ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignStatTail> ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> <Expr> ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> <ArithExpr> <ExprTail> ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> <ArithExpr> epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> <Term> <ArithExprTail> epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> <Term> epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> <Factor> <TermTail> epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> <Factor> epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> <FuncOrVar> epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> 'id' <FuncOrVarIdnest> epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> <FuncOrVarIdnestTail> epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' <FuncOrVarIdnest> epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <AParams> ')' <FuncOrVarIdnestTail> epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <AParams> ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> <AParamsTail> ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' <Expr> <AParamsTail> ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' <Expr> epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' <ArithExpr> <ExprTail> epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' <ArithExpr> epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' <Term> <ArithExprTail> epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' <Term> epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' <Factor> <TermTail> epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' <Factor> epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Expr> ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <ArithExpr> <ExprTail> ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <ArithExpr> epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Term> <ArithExprTail> epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Term> epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Factor> <TermTail> epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' <Factor> epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> 'id' <IndiceRep> '.' 'id' '(' 'intnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> <AssignOp> 'id' epsilon '.' 'id' '(' 'intnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' <IndiceRep> 'assign' 'id' epsilon '.' 'id' '(' 'intnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' <MethodBodyVar> 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' 'intnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' 'var' '{' <VarDeclRep> '}' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' 'intnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' 'var' '{' <VarDecl> <VarDeclRep> '}' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' 'intnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' 'var' '{' <VarDecl> <VarDecl> <VarDeclRep> '}' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' 'intnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' 'var' '{' <VarDecl> <VarDecl> <VarDecl> <VarDeclRep> '}' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' 'intnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' 'var' '{' <VarDecl> <VarDecl> <VarDecl> epsilon '}' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' 'intnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' 'var' '{' <VarDecl> <VarDecl> <Type> 'id' <ArraySizeRept> ';' epsilon '}' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' 'intnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' 'var' '{' <VarDecl> <VarDecl> <Type> 'id' epsilon ';' epsilon '}' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' 'intnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' 'var' '{' <VarDecl> <VarDecl> 'integer' 'id' epsilon ';' epsilon '}' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' 'intnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' 'var' '{' <VarDecl> <Type> 'id' <ArraySizeRept> ';' 'integer' 'id' epsilon ';' epsilon '}' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' 'intnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' 'var' '{' <VarDecl> <Type> 'id' epsilon ';' 'integer' 'id' epsilon ';' epsilon '}' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' 'intnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' 'var' '{' <VarDecl> 'id' 'id' epsilon ';' 'integer' 'id' epsilon ';' epsilon '}' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' 'intnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' 'var' '{' <Type> 'id' <ArraySizeRept> ';' 'id' 'id' epsilon ';' 'integer' 'id' epsilon ';' epsilon '}' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' 'intnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' 'var' '{' <Type> 'id' epsilon ';' 'id' 'id' epsilon ';' 'integer' 'id' epsilon ';' epsilon '}' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' 'intnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> <FuncDef> 'main' '{' 'var' '{' 'id' 'id' epsilon ';' 'id' 'id' epsilon ';' 'integer' 'id' epsilon ';' epsilon '}' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' 'intnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= <ClassDecl> epsilon 'main' '{' 'var' '{' 'id' 'id' epsilon ';' 'id' 'id' epsilon ';' 'integer' 'id' epsilon ';' epsilon '}' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' 'intnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
<Prog> ::= epsilon epsilon 'main' '{' 'var' '{' 'id' 'id' epsilon ';' 'id' 'id' epsilon ';' 'integer' 'id' epsilon ';' epsilon '}' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' 'intnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'id' epsilon '.' 'id' '(' '-' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon ',' 'floatnum' epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ';' 'id' epsilon 'assign' 'intnum' epsilon epsilon epsilon ';' 'if' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon 'gt' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon ')' 'then' '{' 'id' epsilon 'assign' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon 'assign' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ';' 'id' '[' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ']' epsilon 'assign' 'id' epsilon epsilon epsilon epsilon ';' epsilon '}' 'else' epsilon ';' 'while' '(' 'id' epsilon epsilon epsilon 'leq' 'intnum' epsilon epsilon ')' '{' 'write' '(' 'id' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'write' '(' 'id' epsilon '.' 'id' '(' 'id' epsilon epsilon epsilon epsilon epsilon ')' epsilon epsilon epsilon epsilon ')' ';' 'continue' ';' epsilon '}' ';' 'while' '(' 'id' epsilon epsilon epsilon 'lt' 'id' epsilon epsilon epsilon ')' '{' 'write' '(' 'id' '[' 'id' epsilon epsilon epsilon epsilon ']' epsilon epsilon epsilon epsilon epsilon ')' ';' 'id' epsilon 'assign' 'id' epsilon epsilon '+' 'intnum' epsilon epsilon epsilon ';' 'break' ';' epsilon '}' ';' epsilon '}'
